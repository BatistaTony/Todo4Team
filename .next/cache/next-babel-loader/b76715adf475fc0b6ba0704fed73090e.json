{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/batista/Desktop/Boostrap Nextts App/components/ListTask/listTask.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useContext } from \"react\";\nimport { todoContext } from \"../todoContext\";\nimport { ListStyle, Task } from \"./liststyle\";\nexport default function ListTask() {\n  var _this = this;\n\n  var _ref = useContext < any > todoContext,\n      _ref2 = _slicedToArray(_ref, 2),\n      todos = _ref2[0],\n      setToDo = _ref2[1];\n\n  var MarkAsDone = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(index) {\n      var oldToDo;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              oldToDo = _toConsumableArray(todos);\n              _context.next = 3;\n              return _objectSpread(_objectSpread({}, oldToDo[index]), {}, {\n                isDone: !oldToDo[index].isDone\n              });\n\n            case 3:\n              oldToDo[index] = _context.sent;\n              setToDo(oldToDo);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function MarkAsDone(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var deleteTask = function deleteTask(index) {\n    var oldToDo = _toConsumableArray(todos);\n\n    oldToDo.splice(index, 1);\n    setToDo(oldToDo);\n  };\n\n  return __jsx(ListStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, todos.map(function (value, key) {\n    return __jsx(Task, {\n      isDone: value.isDone,\n      key: key,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, __jsx(\"button\", {\n      onClick: function onClick() {\n        return deleteTask(key);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }\n    }, \"Delete\"), value.task, \" \", __jsx(\"span\", {\n      onClick: function onClick() {\n        return MarkAsDone(key);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }, value.isDone ? \"done\" : \"Pending...\"));\n  }));\n}\n_c = ListTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListTask\");","map":{"version":3,"sources":["/home/batista/Desktop/Boostrap Nextts App/components/ListTask/listTask.jsx"],"names":["useContext","todoContext","ListStyle","Task","ListTask","any","todos","setToDo","MarkAsDone","index","oldToDo","isDone","deleteTask","splice","map","value","key","task"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,aAAhC;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AAAA,aACRJ,UAAU,GAAGK,GAAb,GAAmBJ,WADX;AAAA;AAAA,MAC1BK,KAD0B;AAAA,MACnBC,OADmB;;AAGjC,MAAMC,UAAU;AAAA,yEAAG,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,cAAAA,OADW,sBACGJ,KADH;AAAA;AAAA,qDAIZI,OAAO,CAACD,KAAD,CAJK;AAKfE,gBAAAA,MAAM,EAAE,CAACD,OAAO,CAACD,KAAD,CAAP,CAAeE;AALT;;AAAA;AAGjBD,cAAAA,OAAO,CAACD,KAAD,CAHU;AAQjBF,cAAAA,OAAO,CAACG,OAAD,CAAP;;AARiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAVF,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAWA,MAAMI,UAAU,GAAG,SAAbA,UAAa,CAACH,KAAD,EAAW;AAC5B,QAAMC,OAAO,sBAAOJ,KAAP,CAAb;;AAEAI,IAAAA,OAAO,CAACG,MAAR,CAAeJ,KAAf,EAAsB,CAAtB;AAEAF,IAAAA,OAAO,CAACG,OAAD,CAAP;AACD,GAND;;AAQA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,KAAK,CAACQ,GAAN,CAAU,UAACC,KAAD,EAAQC,GAAR;AAAA,WACT,MAAC,IAAD;AAAM,MAAA,MAAM,EAAED,KAAK,CAACJ,MAApB;AAA4B,MAAA,GAAG,EAAEK,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,OAAO,EAAE;AAAA,eAAMJ,UAAU,CAACI,GAAD,CAAhB;AAAA,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEGD,KAAK,CAACE,IAFT,EAEe,GAFf,EAGE;AAAM,MAAA,OAAO,EAAE;AAAA,eAAMT,UAAU,CAACQ,GAAD,CAAhB;AAAA,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,KAAK,CAACJ,MAAN,GAAe,MAAf,GAAwB,YAD3B,CAHF,CADS;AAAA,GAAV,CADH,CADF;AAaD;KAnCuBP,Q","sourcesContent":["import { useContext } from \"react\";\nimport { todoContext } from \"../todoContext\";\nimport { ListStyle, Task } from \"./liststyle\";\n\nexport default function ListTask() {\n  const [todos, setToDo] = useContext < any > todoContext;\n\n  const MarkAsDone = async (index) => {\n    const oldToDo = [...todos];\n\n    oldToDo[index] = await {\n      ...oldToDo[index],\n      isDone: !oldToDo[index].isDone,\n    };\n\n    setToDo(oldToDo);\n  };\n\n  const deleteTask = (index) => {\n    const oldToDo = [...todos];\n\n    oldToDo.splice(index, 1);\n\n    setToDo(oldToDo);\n  };\n\n  return (\n    <ListStyle>\n      {todos.map((value, key) => (\n        <Task isDone={value.isDone} key={key}>\n          <button onClick={() => deleteTask(key)}>Delete</button>\n          {value.task}{\" \"}\n          <span onClick={() => MarkAsDone(key)}>\n            {value.isDone ? \"done\" : \"Pending...\"}\n          </span>\n        </Task>\n      ))}\n    </ListStyle>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}